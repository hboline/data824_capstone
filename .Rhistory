library(tidyverse)
library(ggplot2)
data <- read.csv("./data/Gemini_BTCUSD_2022_1min.csv",
skip = 1, header = TRUE)
data <- data %>%
mutate(Date = as.POSIXct(Date, format = "%Y-%m-%d %H:%M:%OS"))
?a
shiny::runApp('D:/data824_capstone')
# define user-interface
ui <- dashboardPage(skin = "green",
# header
dashboardHeader(title = "DATA 824 Capstone"),
# sidebar
dashboardSidebar(
sidebarMenu(
menuItem("About", tabName = "about", icon = icon("question-sign", lib = "glyphicon")),
menuItem("Data Statistics", tabName = "datastat", icon = icon("filter", lib = "glyphicon")),
menuItem("Data Exploration", tabName = "dataexploration", icon = icon("search", lib = "glyphicon")),
menuItem("Interactive Visualization", tabName = "visualizations", icon = icon("hand-up", lib = "glyphicon")),
menuItem("Data Models", tabName = "models", icon = icon("eye-open", lib = "glyphicon")),
menuItem("Data", tabName = "datatable", icon = icon("table"))
)
),
# body
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "custom.css")
),
tabItems(
# prediction models ----
tabItem(tabName = "models",
h1("Data Models"),
h4("Linear Regression for Age Prediction & Principal Components Analysis"),
br(),
fluidRow(
column(width = 3,
box(width = 12, height = 140, title = "Model Selection",
selectInput("modelchoice", label = "Select model type:",
choices = c("Linear Regression" = "linreg", "PCA" = "pca"),
selected = "linreg")
),
box(width = 12, height = 540, title = "Options",
conditionalPanel(
condition = "input.modelchoice == 'linreg'",
selectInput("LRvars", label = "Choose independent variables:",
choices = var.names[-9], multiple = TRUE,
selected = c("sex", "height", "whole.weight")),
sliderInput("splt", "Test/Train Split (Training Proportion)",
min = .5, max = .95, value = .8, step = .05),
actionButton("LRgo", "Run Regression Model")
),
conditionalPanel(
condition = "input.modelchoice == 'pca'",
selectInput("pcaplots", label = "Choose plot:",
choices = c("PCA Scatterplot" = "opt1", "Information Table" = "opt2"),
selected = "opt1"),
conditionalPanel(
condition = "input.pcaplots == 'opt1'",
h4("Select PCA Components:"),
uiOutput("PCAopt1"),
uiOutput("PCAopt2"),
uiOutput("PCAopt3"),
checkboxInput("incinf", "Include infants?", value = TRUE),
br(),
br(),
br(),
br(),
actionBttn("PCAgo", "Show/Refresh Plot", style = "simple", color = "success", size = 'lg', block = TRUE)
),
conditionalPanel(
condition = "input.pcaplots == 'opt2'",
selectInput("PCAtableopt", label = "Select Table:",
choices = c("Eigenvalues" = "opt1", "Eigenspace Data Coordinates" = "opt2",
"Variable Correlation w/ PCA Axes" = "opt3"))
)
)
)
),
conditionalPanel(
condition = "input.modelchoice == 'linreg'",
column(width = 5,
box(width = 12, height = 440, title = "Regression Prediction Results Plot",
splitLayout(
radioGroupButtons("LRtag", label = NULL, choices = c("Test" = "test", "Train" = "train", "Both" = "both")),
textOutput("LRr2adj")
),
plotOutput(outputId = "LRabline", height = 330)
),
box(width = 12, height = 240,
plotOutput(outputId = "LRrh", height = 220)
)
),
column(width = 4,
box(width = 12, height = 300, title = "Model Statistics",
DT::DTOutput("LRstat")
),
box(width = 12, height = 210, title = "Make Prediction",
splitLayout(
uiOutput("sexpred"),
uiOutput("lengthpred"),
uiOutput("heightpred"),
uiOutput("diameterpred")
),
splitLayout(
uiOutput("wholeweightpred"),
uiOutput("shuckedweightpred"),
uiOutput("visceraweightpred"),
uiOutput("shellweightpred")
)
),
box(width = 12, height = 150,
uiOutput("predictionbutton"),
DT::DTOutput("LRpredres")
)
)
),
conditionalPanel(
condition = "input.modelchoice == 'pca'",
column(width = 9,
conditionalPanel(
condition = "input.pcaplots == 'opt1'",
box(width = 12, height = 700,
plotOutput(outputId = "PCA1", height = 650)
)
),
conditionalPanel(
condition = "input.pcaplots == 'opt2'",
DT::dataTableOutput(outputId = "PCAtable")
)
)
)
)
), # ----
# data statistics ----
tabItem(tabName = "datastat",
h1("Data Statistics"),
h4("Statistical Summaries and Tests"),
br(),
fluidRow(
# summary options
column(width = 7,
box(width = 12, height = 360, title = "General Summary",
DT::DTOutput(outputId = "dataSummary")
)
),
column(width = 5,
box(width = 12, height = 360,
radioGroupButtons("statbarchoice", label = "Select Statistic to Visualize:",
choices = c("Mean" = 'mean', "Variance" = 'var', "Std. Dev." = 'sd',
"Min" = 'min', "Median" = 'median', "Max" = 'max')),
plotOutput(outputId = "stddevplot", height = 260)
)
)
),
fluidRow(
column(width = 3,
box(width = 12, title = "Statistical Test", height = 360,
selectInput("stattestchoice", "Choose statistical test:",
choices = c("Gender Measures (2-sample t-test)" = "st1",
"Linear Regression" = "st2")),
conditionalPanel(
condition = "input.stattestchoice == 'st1'",
radioButtons("st1c", label = "Choose gender pair:", inline = TRUE,
choices = c("Male-Female" = "mf", "Male-Infant" = "mi", "Female-Infant" = "fi")),
selectInput("stattestvar", label = "Choose variable to test:",
choices = var.names[2:9])
),
conditionalPanel(
condition = "input.stattestchoice == 'st2'",
selectInput("st2ind", label = "Choose independent variables:",
choices = var.names, multiple = TRUE),
uiOutput("st2depUI")
),
actionButton("stattestgo", "Perform Test")
)
),
column(width = 4,
box(width = 12, title = "Test Results", height = 360,
conditionalPanel(
condition = "input.stattestchoice == 'st1'",
DT::DTOutput(outputId = "st1")
),
conditionalPanel(
condition = "input.stattestchoice == 'st2'",
DT::DTOutput(outputId = "st2")
)
)
),
column(width = 5,
conditionalPanel(
condition = "input.stattestchoice == 'st2'",
box(width = 12, height = 360, title = "Linear Model Residual Distribution",
condition = "input.stattestchoice == 'st2'",
plotOutput(outputId = "st2plot", height = 300)
)
)
)
)
), # ----
# data exploration ----
tabItem(tabName = "dataexploration",
h1("Data Exploration & Visualization"),
h4("Box, Violin, Frequency, and Correlation Plots"),
br(),
fluidRow(
# selection and options
column(width = 3,
# main selection
box(width = 12, title = "Select Visualization:",
selectInput(inputId = "viztype", label = NULL,
choices = c("Box Plots" = "box", "Frequency Plots" = "dist",
"Violin Plots" = "violin", "Correlation Plot" = "corr"))
),
# histogram/area plot options
conditionalPanel(
condition = "input.viztype == 'dist'",
box(width = 12, title = "Plot Options:",
selectInput(inputId = "distvar", label = "Select measurement type:",
choices = c("Lengths (mm)" = "m", "Weights (g)" = "w", "Age by Gender" = "a")),
radioGroupButtons(inputId = "disttype", label = "Selection distribution type:",
choices = c("Histogram" = "hist", "Area Plot" = "area"))
)
),
# violin plot options
conditionalPanel(
condition = "input.viztype == 'violin'",
box(width = 12, title = "Plot Options:",
selectInput(inputId = "viovar", label = "Select measurement type:",
choices = c("Lengths (mm)" = "m", "Weights (g)" = "w", "Age by Gender" = "a"))
)
),
# box plot options
conditionalPanel(
condition = "input.viztype == 'box'",
box(width = 12, title = "Plot Options:",
selectInput(inputId = "boxvar", label = "Select measurement type:",
choices = c("Lengths (mm)" = "m", "Weights (g)" = "w", "Age by Gender" = "a")),
checkboxInput(inputId = "boxdots", label = "Plot data points?", value = FALSE)
)
),
# correlation plot options
conditionalPanel(
condition = "input.viztype == 'corr'",
box(width = 12, title = "Plot Options:",
radioGroupButtons(inputId = "corrmethod", label = "Select correlation method:",
choices = c("Pearson" = "pearson", "Spearman" = "spearman", "Kendall" = "kendall"),
selected = "pearson")
)
)
),
# plots
column(width = 9,
# boxplot
conditionalPanel(
condition = "input.viztype == 'box'",
box(width = 12,
plotOutput(outputId = "boxplot", height = "700px")
)
), #
# violin plot
conditionalPanel(
condition = "input.viztype == 'violin'",
box(width = 12,
plotOutput(outputId = "violinplot", height = "700px")
)
), #
# frequency plots
conditionalPanel(
condition = "input.viztype == 'dist'",
box(width = 12,
plotOutput(outputId = "distplot", height = "600px")
)
),
# correlation plot
conditionalPanel(
condition = "input.viztype == 'corr'",
box(width = 10,
plotOutput(outputId = "corrplot", height = "600px")
)
)
)
)
), # ----
# data table ----
tabItem(tabName = "datatable",
h1("Abalone Data"),
br(),
fluidRow(
column(width = 12,
DT::dataTableOutput(outputId = 'mydata')
)
)
), # ----
# about page ----
tabItem(tabName = "about",
fluidPage(
h1("Introduction"),
p("The dataset used in this project comes from the ",
a("UCI Machine Learning Repository", href = "https://archive.ics.uci.edu/ml/index.phpv"),
". ")
)
), # ----
# interactive visualization tab ----
tabItem(tabName = "visualizations",
h1("Interactive Visualization"),
br(),
fluidRow(
column(width = 3,
box(width = 12, title = "Variable Options",
selectInput(inputId = "xvar", label = "Select x-variable:",
choices = append(var.names[9], var.names[2:8]), selected = "height"),
selectInput(inputId = "yvar", label = "Select y-variable:",
choices = append(var.names[9], var.names[2:8]), selected = "age"),
checkboxGroupButtons(inputId = "sexes", label = "Select genders:",
choiceNames = c("Male", "Female", "Infant"),
choiceValues = c("male", "female", "infant"),
selected = c("male", "female", "infant"),
checkIcon = list(yes = icon("ok", lib = "glyphicon")))
),
box(width = 12, height = 410, title = "Plot Options",
sliderInput(inputId = "alpha", label = "Point opacity:",
min = 0.0, max = 1.0, step = 0.1, value = 1.0),
sliderInput(inputId = "ptsize", label = "Point size:",
min = 0.1, max = 2.0, step = 0.1, value = 2.0),
checkboxInput(inputId = "jitchk", label = "Jitter points?", value = TRUE),
checkboxInput(inputId = "matchfill", label = "Match fill color?", value = FALSE)
)
),
column(width = 9,
box(width = 40,
plotlyOutput("plot1", height = "700px")
)
)
)
) # ----
)
)
)
setwd("D:/data824_capstone")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# load and clean data ----
data <- read.csv("abalone.csv", header = TRUE)
data <- data %>%
mutate(sex = case_when(sex == "M" ~ "male",
sex == "F" ~ "female",
sex == "I" ~ "infant")) %>%
mutate(sex = factor(sex, levels = c("male", "female", "infant")),
across(.cols = colnames(.)[2:8], ~ .x*200),
age = rings + 1) %>%
filter(height < 60) %>%
select(-rings)
var.names <- setNames(colnames(data), c("Sex", "Length", "Diameter", "Height", "Whole Weight", "Shucked Weight", "Viscera Weight", "Shell Weight", "Age"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboardPlus")
runApp()
?library
detach("package:shinydashboardPlus", unload = TRUE)
shinydashboardPlus::box()
box()
shinydashboard::box()
