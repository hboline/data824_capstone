library(tidyverse)
library(ggplot2)
data <- read.csv("./data/Gemini_BTCUSD_2022_1min.csv",
skip = 1, header = TRUE)
data <- data %>%
mutate(Date = as.POSIXct(Date, format = "%Y-%m-%d %H:%M:%OS"))
setwd("D:/data824_capstone")
shiny::runApp()
# load and clean data ----
data <- read.csv("abalone.csv", header = TRUE)
data <- data %>%
mutate(sex = case_when(sex == "M" ~ "male",
sex == "F" ~ "female",
sex == "I" ~ "infant")) %>%
mutate(sex = factor(sex, levels = c("male", "female", "infant")),
across(.cols = colnames(.)[2:8], ~ .x*200),
age = rings + 1) %>%
filter(height < 60) %>%
select(-rings)
var.names <- setNames(colnames(data), c("Sex", "Length", "Diameter", "Height", "Whole Weight", "Shucked Weight", "Viscera Weight", "Shell Weight", "Age"))
summary(data)
library(Hmisc)
describe(data)
data %>% sapply(mean)
# load libraries ----
library(shiny)
library(tidyverse)
library(plotly)
library(shinydashboard)
library(corrplot)
library(modelr)
library(broom)
library(FactoMineR)
library(factoextra)
library(cluster)
library(scales)
sapply(data, mean)
sapply(data[,-1], mean)
?renderTable
data.frame(c(1,2), c(3,4))
data.frame(c(1,2), c(9,4))
rbind(c(1,2), c(4,5), c(0,4))
rbind("a" = c(1,2), "b" = c(4,5), "d" = c(0,4))
rbind(sapply(data[,-1],mean),sapply(data[,-1],sd))
as.data.frame(rbind({
"Mean" = sapply(data[,-1], mean),
"Mean" = sapply(data[,-1], mean),
"Mean" = sapply(data[,-1], mean),
"Mean" = sapply(data[,-1], mean),
"Mean" = sapply(data[,-1], mean),
"Mean" = sapply(data[,-1], mean),
"Mean" = sapply(data[,-1], mean)
}))
sapply(data[,-1], quantile)
rbind(sapply(data[,-1],mean),sapply(data[,-1], quantile))
rbind(sapply(sapply(data[,-1],mean),sapply(data[,-1], quantile)), round, 2)
sapply(rbind(sapply(data[,-1],mean),sapply(data[,-1], quantile)), round, 2)
data
round(data, 2)
round(data[,-1], 0)
as.data.frame(rbind(
"Mean" = sapply(data[,-1], mean),
"Variance" = sapply(data[,-1], var),
"Std. Dev." = sapply(data[,-1], sd),
"Min" = sapply(data[,-1], min),
"Median" = sapply(data[,-1], median),
"Max" = sapply(data[,-1], max),
sapply(data[,-1], quantile)
))
as.data.frame(rbind(
"Mean" = sapply(data[,-1], mean),
"Variance" = sapply(data[,-1], var),
"Std. Dev." = sapply(data[,-1], sd),
"Min" = sapply(data[,-1], min),
"Median" = sapply(data[,-1], median),
"Max" = sapply(data[,-1], max)
))
round(as.data.frame(rbind(
"Mean" = sapply(data[,-1], mean),
"Variance" = sapply(data[,-1], var),
"Std. Dev." = sapply(data[,-1], sd),
"Min" = sapply(data[,-1], min),
"Median" = sapply(data[,-1], median),
"Max" = sapply(data[,-1], max)
)), 2)
round(as.data.frame(rbind(
"Mean" = sapply(data[,-1], mean),
"Variance" = sapply(data[,-1], var),
"Std. Dev." = sapply(data[,-1], sd),
"Min" = sapply(data[,-1], min),
"Median" = sapply(data[,-1], median),
"Max" = sapply(data[,-1], max)
)), 3)
runApp()
colnames(df) <- names(var.names)[2:9]
runApp()
runApp()
?renderDataTable
?DTOutput
runApp()
runApp()
sapply(data[,-1], sd)
sapply(data[,-1], sd) %>% pivot_longer()
data.frame(sapply(data[,-1], sd)) %>% pivot_longer()
data.frame(sapply(data[,-1], sd)) %>% pivot_longer(cols = 1:ncols(.))
data.frame(sapply(data[,-1], sd)) %>% pivot_longer(cols = 1:ncol(.))
x <- data.frame(sapply(data[,-1], sd)) %>% pivot_longer(cols = 1:ncol(.))
View(x)
x <- as.data.frame(sapply(data[,-1], sd)) %>% pivot_longer(cols = 1:ncol(.))
View(x)
x <- as.data.frame(sapply(data[,-1], sd))
as.data.frame(sapply(data[,-1], sd))
colnames(x) <- "value"
x
x %>% ggplot(aes(y = values)) + geom_bar()
x %>% ggplot(aes(y = values)) + geom_col()
x %>% ggplot(aes(y = value)) + geom_bar()
x %>% ggplot(aes(y = value)) + geom_col()
x %>% ggplot(aes(y = value)) + geom_count()
x %>% ggplot(aes(y = value)) + geom_bar()
x %>% ggplot(aes(y = value)) + geom_col()
x %>% ggplot(aes(x = row.names(.), y = value)) + geom_col()
View(x)
x %>% ggplot(aes(y = row.names(.), x = value)) + geom_col()
runApp()
runApp()
runApp()
install.packages("shinyWidgets")
runApp()
runApp()
data.frame(cbind(runif(50), rnorm(50)))
runApp()
runApp()
data <- read.csv("abalone.csv", header = TRUE)
data <- read.csv("abalone.csv", header = TRUE)
# make "sex" variable a factor (I = infant)
# multiple measurements by 200 (see abalone.names)
# add an "age" variable based on rings (rings + 1.5)
# for the sake of neatness we will use (rings + 1)
data <- data %>%
mutate(sex = case_when(sex == "M" ~ "male",
sex == "F" ~ "female",
sex == "I" ~ "infant")) %>%
mutate(sex = factor(sex, levels = c("male", "female", "infant")),
across(.cols = colnames(.)[2:8], ~ .x*200),
age = rings + 1) %>%
filter(height < 60) %>%
select(-rings)
# Statistical tests
lm(age ~ length + whole.weight, data = data)
# Statistical tests
lm(age ~ length + whole.weight, data = data)
source("D:/data824_capstone/experiments.R", echo=TRUE)
# Statistical tests
lm(age ~ length + whole.weight, data = data) %>% tidy
# Statistical tests
lm(age ~ gender, data = data) %>% tidy
# Statistical tests
lm(age ~ sex, data = data) %>% tidy
# Statistical tests
lm(age ~ sex + height + whole.weight, data = data) %>% tidy
# Statistical tests
lm(age ~ sex + height + whole.weight, data = data) %>% coef
# Statistical tests
m <- lm(age ~ sex + height + whole.weight, data = data) %>% coef
?predict.lm
runApp()
m %>% augment(data = data)
m %>% augment()
m
# Statistical tests
m <- lm(age ~ sex + height + whole.weight, data = data)
predict.lm(m, newdata = c("sex" = 'male', "height" = 2, "whole.weight" = 14))
source("D:/data824_capstone/experiments.R", echo=TRUE)
# Statistical tests
m <- lm(age ~ sex + height + whole.weight, data = data)
predict.lm(m, newdata = data.frame("sex" = 'male', "height" = 2, "whole.weight" = 14))
# Statistical tests
m <- glm(age ~ sex + height + whole.weight, data = data)
predict.lm(m, newdata = data.frame("sex" = 'male', "height" = 2, "whole.weight" = 14))
# Statistical tests
m <- glm(age ~ sex + height + whole.weight, data = data)
predict.lm(m, newdata = data.frame("sex" = 'male', "height" = 2, "whole.weight" = 14))
m %>% augment()
m %>% augment(data = data)
x <- m %>% augment(data = data)
x <- m %>% augment(data = data) %>% as.data.frame
View(x)
x %>% ggplot(aes(x = `.resid`)) %>% geom_histogram(bindwidth = 1/4)
x %>% ggplot(aes(x = `.resid`)) + geom_histogram(bindwidth = 1/4)
x %>% ggplot(aes(x = `.resid`)) + geom_histogram(binwidth = 1/4)
x %>% ggplot(aes(x = `.resid`)) + geom_area(binwidth = 1/4, stat = "smooth")
x %>% ggplot(aes(x = `.resid`)) + geom_area(binwidth = 1/4, stat = "bin")
x %>% ggplot(aes(x = `.resid`)) + geom_area(binwidth = 1/4, stat = "bin", color = "gray20", alpha = 0.5)
x %>% ggplot(aes(x = `.resid`)) + geom_area(binwidth = 1/4, stat = "bin", color = "gray20", alpha = 0.5) + scale_y_log10()
x %>% ggplot(aes(x = `.resid`)) + geom_area(binwidth = 1/4, stat = "bin", color = "gray20", alpha = 0.5)
x %>% ggplot(aes(x = `.resid`)) + geom_area(stat = "bin", color = "gray20", alpha = 0.5, binwidth = .1)
x %>% ggplot(aes(x = `.resid`)) + geom_area(stat = "bin", color = "gray20", alpha = 0.5, binwidth = 1)
x %>% ggplot(aes(x = `.resid`)) + geom_area(stat = "bin", color = "gray20", alpha = 0.5, binwidth = .05)
x %>% ggplot(aes(x = `.resid`)) + geom_area(stat = "bin", color = "gray20", alpha = 0.5, binwidth = .15)
x %>% ggplot(aes(x = `.resid`)) + geom_area(stat = "bin", color = "gray20", alpha = 0.5, binwidth = .1)
x %>% ggplot(aes(x = `.resid`)) + geom_histogram(binwidth = .1)
runApp()
m %>% tidy
m %>% glance
set.seed(1)
sample(1:23, 17)
(1:23)[4]
(1:23)[which(!1:23 %in% sample(1:23, 17))]
sample(1:23, 17)
sample(1:23, 17, seed = 1)
sample(1:23, 17)
seed = 1; inds <- sample(1:23, 17)
x = 1:23
seed = 1; inds <- sample(x, 17)
inds
x[which(!(x %in% inds))]
runApp()
